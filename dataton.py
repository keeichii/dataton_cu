# -*- coding: utf-8 -*-
"""dataton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qErQtoSiDKEXfIPg08Q6Ia3HMbbzRl2O
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json
import csv
import sys
import math
from datetime import datetime

yelp_path = '/content/drive/MyDrive/Colab Notebooks/preparation/yelp.json'
yelp_df = pd.read_json(open(yelp_path), lines=True)
yelp_df.head()

yelp_df = yelp_df[yelp_df.stars >= 4.5]
yelp_df = yelp_df[yelp_df.review_count 	 >= 300]
yelp_df = yelp_df.drop(['business_id', 'name', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'stars', 'review_count', 'is_open'], axis=1)

#atts = cats = hours = []

for i, d in yelp_df.iterrows():

  '''
  if d['attributes'] != None:
    for k in d['attributes'].keys():
      yelp_df.loc[i, k] = d['attributes'].get(k)
  '''


  if d['hours'] != None:
    k = 0
    for value in d['hours'].values():
      t = value.split('-')
      passed = ((int(t[1].split(':')[0]) * 60 + int(t[1].split(':')[1])) - (int(t[0].split(':')[0]) * 60 + int(t[0].split(':')[1]))) / 60
      if passed == 0: k += 12
      else: k += passed
    yelp_df.loc[i, 'hours'] = int(k)




#yelp_df = yelp_df.drop(['attributes', 'categories'])
yelp_df = yelp_df.fillna(False)

f1 = '/content/drive/MyDrive/Colab Notebooks/dataton/st.xlsx'
yelp_df.to_excel(f1)

yelp_df

dic1 = {}
dic2 = {}
for i, d in yelp_df.iterrows():
  for a in d['categories'].split(', '):
    if a not in dic1.keys():
      dic1[a] = 1
    else: dic1[a] += 1
  try:
    for a in d['attributes'].keys():
      if d['attributes'][a] == True:
        if a not in dic2.keys():
          dic2[a] = 1
        else: dic2[a] += 1
  except: ...
print(dict(sorted(dic1.items(), key=lambda item: item[1], reverse=True)))
print(dict(sorted(dic2.items(), key=lambda item: item[1], reverse=True)))

'''from matplotlib import pyplot as plt
import seaborn as sns
df_0.groupby('categories').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)'''

#inter
inter_pd = pd.read_csv(open('/content/drive/MyDrive/Colab Notebooks/dataton/inter.csv'))
inter_pd.head()

#order
order_pd = pd.read_csv(open('/content/drive/MyDrive/Colab Notebooks/dataton/order.csv'))
order_pd.head()

# @title avg_bill

from matplotlib import pyplot as plt
order_pd['avg_bill'].plot(kind='hist', bins=20, title='avg_bill')
plt.gca().spines[['top', 'right',]].set_visible(False)

#user
user_pd = pd.read_csv(open('/content/drive/MyDrive/Colab Notebooks/dataton/user.csv'))
user_pd.head()

f2 = '/content/drive/MyDrive/Colab Notebooks/dataton/nd.xlsx'
big_df = pd.read_csv(open('/content/drive/MyDrive/Colab Notebooks/dataton/big_df.csv'))
#big_df = big_df.dropna()
big_df = big_df.fillna(0)

'''
big_df = big_df[big_df.alcohol >= 0]
big_df = big_df[big_df.fish >= 0]
big_df = big_df[big_df.fruits >= 0]
big_df = big_df[big_df.meat >= 0]
big_df = big_df[big_df.other >= 0]
big_df = big_df[big_df.sweets >= 0]
big_df = big_df[big_df.vegetables >= 0]
big_df = big_df[big_df.discount_purchases_count_avg	 >= 0]
big_df = big_df[big_df.catalogue_purchases_count_avg >= 0]
big_df = big_df[big_df.store_purchases_count_avg >= 0]
big_df = big_df[big_df.website_purchases_count_avg >= 0]
big_df = big_df[big_df.website_visit_count_avg >= 0]
big_df = big_df[big_df.mobile_purchases_count_avg	 >= 0]
big_df = big_df[big_df.mobile_visit_count_avg >= 0]
big_df = big_df[big_df.marketing_company_outcome_1 >= 0]
big_df = big_df[big_df.marketing_company_outcome_2 >= 0]
big_df = big_df[big_df.marketing_company_outcome_3 >= 0]
big_df = big_df[big_df.marketing_company_outcome_4 >= 0]
big_df = big_df[big_df.marketing_company_outcome_5 >= 0]
big_df = big_df[big_df.age >= 0]
big_df = big_df[big_df.income >= 0]
big_df = big_df[big_df.kids >= 0]
big_df = big_df[big_df.teenagers >= 0]
'''
cnt1 = 0
cnt2 = 0
cats = ['alcohol', 'fish', 'fruits', 'meat', 'other', 'sweets', 'vegetables']
online_b = [0, 0, 0, 0, 0, 0, 0]
offline_b = [0, 0, 0, 0, 0, 0, 0]


td = datetime.now()
marital_l = []
education_l = []
for i, d in big_df.iterrows():
  if d['marital'] not in marital_l:
    marital_l.append(d['marital'])
  big_df.loc[i, 'marital'] = marital_l.index(d['marital']) + 1

  if d['education'] not in education_l and d['education'] != 0:
    education_l.append(d['education'])
  if d['education'] != 0:
    big_df.loc[i, 'education'] = education_l.index(d['education']) + 1

  da = datetime.strptime(d['join_datetime'].split(' ')[0].replace('-', '.'), '%Y.%m.%d')
  m = int((str(td - da)).split(' ')[0]) // 30
  big_df.loc[i, 'join_datetime'] = m

  if d['last_order_dt'] != 0:
    da = datetime.strptime(str(d['last_order_dt']).replace('-', '.'), '%Y.%m.%d')
    big_df.loc[i, 'last_order_dt'] = int((str(td - da)).split(' ')[0])

  if d['alcohol'] < 0:
    big_df.loc[i, 'alcohol'] = 0
  if d['fish'] < 0:
    big_df.loc[i, 'fish'] = 0
  if d['fruits'] < 0:
    big_df.loc[i, 'fruits'] = 0
  if d['meat'] < 0:
    big_df.loc[i, 'meat'] = 0
  if d['other'] < 0:
    big_df.loc[i, 'other'] = 0
  if d['sweets'] < 0:
    big_df.loc[i, 'sweets'] = 0
  if d['vegetables'] < 0:
    big_df.loc[i, 'vegetables'] = 0
  if d['discount_purchases_count_avg'] < 0:
    big_df.loc[i, 'discount_purchases_count_avg'] = 0
  if d['catalogue_purchases_count_avg'] < 0:
    big_df.loc[i, 'catalogue_purchases_count_avg'] = 0
  if d['store_purchases_count_avg'] < 0:
    big_df.loc[i, 'store_purchases_count_avg'] = 0
  if d['website_purchases_count_avg'] < 0:
    big_df.loc[i, 'website_purchases_count_avg'] = 0
  if d['website_visit_count_avg'] < 0:
    big_df.loc[i, 'website_visit_count_avg'] = 0
  if d['mobile_purchases_count_avg'] < 0:
    big_df.loc[i, 'mobile_purchases_count_avg'] = 0
  if d['mobile_visit_count_avg'] < 0:
    big_df.loc[i, 'mobile_visit_count_avg'] = 0
  if d['marketing_company_outcome_1'] < 0:
    big_df.loc[i, 'marketing_company_outcome_1'] = 0
  if d['marketing_company_outcome_2'] < 0:
    big_df.loc[i, 'marketing_company_outcome_2'] = 0
  if d['marketing_company_outcome_3'] < 0:
    big_df.loc[i, 'marketing_company_outcome_3'] = 0
  if d['marketing_company_outcome_4'] < 0:
    big_df.loc[i, 'marketing_company_outcome_4'] = 0
  if d['marketing_company_outcome_5'] < 0:
    big_df.loc[i, 'marketing_company_outcome_5'] = 0
  if d['age'] < 0:
    big_df.loc[i, 'age'] = 0
  if d['income'] < 0:
    big_df.loc[i, 'income'] = 0
  if d['kids'] < 0:
    big_df.loc[i, 'kids'] = 0
  if d['teenagers'] < 0:
    big_df.loc[i, 'teenagers'] = 0

  k = d['catalogue_purchases_count_avg'] + d['store_purchases_count_avg'] + d['website_purchases_count_avg'] + d['mobile_purchases_count_avg']
  big_df.loc[i, 'k'] = k
  big_df.loc[i, 'all'] = (d['alcohol'] + d['fish'] + d['fruits'] + d['meat'] + d['other'] + d['sweets'] + d['vegetables'])
  cnt1 += d['store_purchases_count_avg']
  cnt2 += k - cnt1



new_df = big_df.drop(['index', 'UserId', 'education', 'marital'], axis=1)
#big_df = big_df.assign(all = (big_df['alcohol'] + big_df['fish'] + big_df['fruits'] + big_df['meat'] + big_df['other'] + big_df['sweets'] + big_df['vegetables']) )
print(marital_l)
print(education_l)
new_df = new_df.astype(int)

new_df

new_df[new_df.alcohol < 0]

sum(new_df['all'])

plt.figure(figsize=(20,16), dpi= 80)
sns.heatmap(new_df.corr(), xticklabels=new_df.corr().columns, yticklabels=new_df.corr().columns, cmap='RdPu', center=0, annot=True)
plt.show()

'''cats = ['alcohol', 'fish', 'fruits', 'meat', 'other', 'sweets', 'vegetables']
online_b = [0, 0, 0, 0, 0, 0, 0]
offline_b = [0, 0, 0, 0, 0, 0, 0]'''
#new_df['k'].mean()
cats = ['offline', 'online']
nums = [cnt1, cnt2]
plt.pie(nums, labels=cats)

#online-offline most bought

people = ['Кол-во людей в Москве', 'Кол-во курьеров в Москве']
couriers = [12_712_305, 100_000]
plt.pie(couriers, labels=people)

new_df.plot.scatter(x = 'income',
                    y = 'other',
                    alpha = 0.5)